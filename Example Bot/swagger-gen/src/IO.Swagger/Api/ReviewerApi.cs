/* 
 * Higgs API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReviewerApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardName"> (optional)</param>
        /// <returns>int?</returns>
        int? ReviewerBotByDashboardGet (string dashboardName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardName"> (optional)</param>
        /// <returns>ApiResponse of int?</returns>
        ApiResponse<int?> ReviewerBotByDashboardGetWithHttpInfo (string dashboardName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentUrl"> (optional)</param>
        /// <returns>List&lt;ReviewerCheckResponse&gt;</returns>
        List<ReviewerCheckResponse> ReviewerCheckGet (string contentUrl = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentUrl"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ReviewerCheckResponse&gt;</returns>
        ApiResponse<List<ReviewerCheckResponse>> ReviewerCheckGetWithHttpInfo (string contentUrl = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns></returns>
        void ReviewerClearFeedbackPost (ClearFeedbackRequest request = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ReviewerClearFeedbackPostWithHttpInfo (ClearFeedbackRequest request = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ReviewerDashboardsResponse&gt;</returns>
        List<ReviewerDashboardsResponse> ReviewerDashboardsGet ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ReviewerDashboardsResponse&gt;</returns>
        ApiResponse<List<ReviewerDashboardsResponse>> ReviewerDashboardsGetWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardName"> (optional)</param>
        /// <returns>List&lt;ReviewerFeedbacksResponse&gt;</returns>
        List<ReviewerFeedbacksResponse> ReviewerFeedbacksGet (string dashboardName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardName"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ReviewerFeedbacksResponse&gt;</returns>
        ApiResponse<List<ReviewerFeedbacksResponse>> ReviewerFeedbacksGetWithHttpInfo (string dashboardName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastId"> (optional)</param>
        /// <returns>ReviewerReportResponse</returns>
        ReviewerReportResponse ReviewerNextReviewGet (int? lastId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastId"> (optional)</param>
        /// <returns>ApiResponse of ReviewerReportResponse</returns>
        ApiResponse<ReviewerReportResponse> ReviewerNextReviewGetWithHttpInfo (int? lastId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardName"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <returns>PagingResponseInt32</returns>
        PagingResponseInt32 ReviewerPendingReviewsGet (string dashboardName = null, int? pageNumber = null, int? pageSize = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardName"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <returns>ApiResponse of PagingResponseInt32</returns>
        ApiResponse<PagingResponseInt32> ReviewerPendingReviewsGetWithHttpInfo (string dashboardName = null, int? pageNumber = null, int? pageSize = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardName"> (optional)</param>
        /// <returns>List&lt;ReviewerReasonsResponse&gt;</returns>
        List<ReviewerReasonsResponse> ReviewerReasonsGet (string dashboardName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardName"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ReviewerReasonsResponse&gt;</returns>
        ApiResponse<List<ReviewerReasonsResponse>> ReviewerReasonsGetWithHttpInfo (string dashboardName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ReviewerReportResponse</returns>
        ReviewerReportResponse ReviewerReportGet (int? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ReviewerReportResponse</returns>
        ApiResponse<ReviewerReportResponse> ReviewerReportGetWithHttpInfo (int? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="content"> (optional)</param>
        /// <param name="botId"> (optional)</param>
        /// <param name="hasFeedback"> (optional)</param>
        /// <param name="conflicted"> (optional)</param>
        /// <param name="feedbacks"> (optional)</param>
        /// <param name="reasons"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <returns>PagingResponseReviewerReportsResponse</returns>
        PagingResponseReviewerReportsResponse ReviewerReportsGet (string content = null, int? botId = null, bool? hasFeedback = null, bool? conflicted = null, List<int?> feedbacks = null, List<int?> reasons = null, int? pageNumber = null, int? pageSize = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="content"> (optional)</param>
        /// <param name="botId"> (optional)</param>
        /// <param name="hasFeedback"> (optional)</param>
        /// <param name="conflicted"> (optional)</param>
        /// <param name="feedbacks"> (optional)</param>
        /// <param name="reasons"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <returns>ApiResponse of PagingResponseReviewerReportsResponse</returns>
        ApiResponse<PagingResponseReviewerReportsResponse> ReviewerReportsGetWithHttpInfo (string content = null, int? botId = null, bool? hasFeedback = null, bool? conflicted = null, List<int?> feedbacks = null, List<int?> reasons = null, int? pageNumber = null, int? pageSize = null);
        /// <summary>
        /// Lists all pending review
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns></returns>
        void ReviewerSendFeedbackPost (SendFeedbackRequest request = null);

        /// <summary>
        /// Lists all pending review
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ReviewerSendFeedbackPostWithHttpInfo (SendFeedbackRequest request = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardName"> (optional)</param>
        /// <returns>Task of int?</returns>
        System.Threading.Tasks.Task<int?> ReviewerBotByDashboardGetAsync (string dashboardName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardName"> (optional)</param>
        /// <returns>Task of ApiResponse (int?)</returns>
        System.Threading.Tasks.Task<ApiResponse<int?>> ReviewerBotByDashboardGetAsyncWithHttpInfo (string dashboardName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentUrl"> (optional)</param>
        /// <returns>Task of List&lt;ReviewerCheckResponse&gt;</returns>
        System.Threading.Tasks.Task<List<ReviewerCheckResponse>> ReviewerCheckGetAsync (string contentUrl = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentUrl"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ReviewerCheckResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ReviewerCheckResponse>>> ReviewerCheckGetAsyncWithHttpInfo (string contentUrl = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ReviewerClearFeedbackPostAsync (ClearFeedbackRequest request = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ReviewerClearFeedbackPostAsyncWithHttpInfo (ClearFeedbackRequest request = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ReviewerDashboardsResponse&gt;</returns>
        System.Threading.Tasks.Task<List<ReviewerDashboardsResponse>> ReviewerDashboardsGetAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ReviewerDashboardsResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ReviewerDashboardsResponse>>> ReviewerDashboardsGetAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardName"> (optional)</param>
        /// <returns>Task of List&lt;ReviewerFeedbacksResponse&gt;</returns>
        System.Threading.Tasks.Task<List<ReviewerFeedbacksResponse>> ReviewerFeedbacksGetAsync (string dashboardName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardName"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ReviewerFeedbacksResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ReviewerFeedbacksResponse>>> ReviewerFeedbacksGetAsyncWithHttpInfo (string dashboardName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastId"> (optional)</param>
        /// <returns>Task of ReviewerReportResponse</returns>
        System.Threading.Tasks.Task<ReviewerReportResponse> ReviewerNextReviewGetAsync (int? lastId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastId"> (optional)</param>
        /// <returns>Task of ApiResponse (ReviewerReportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReviewerReportResponse>> ReviewerNextReviewGetAsyncWithHttpInfo (int? lastId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardName"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <returns>Task of PagingResponseInt32</returns>
        System.Threading.Tasks.Task<PagingResponseInt32> ReviewerPendingReviewsGetAsync (string dashboardName = null, int? pageNumber = null, int? pageSize = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardName"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <returns>Task of ApiResponse (PagingResponseInt32)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagingResponseInt32>> ReviewerPendingReviewsGetAsyncWithHttpInfo (string dashboardName = null, int? pageNumber = null, int? pageSize = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardName"> (optional)</param>
        /// <returns>Task of List&lt;ReviewerReasonsResponse&gt;</returns>
        System.Threading.Tasks.Task<List<ReviewerReasonsResponse>> ReviewerReasonsGetAsync (string dashboardName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardName"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ReviewerReasonsResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ReviewerReasonsResponse>>> ReviewerReasonsGetAsyncWithHttpInfo (string dashboardName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ReviewerReportResponse</returns>
        System.Threading.Tasks.Task<ReviewerReportResponse> ReviewerReportGetAsync (int? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ReviewerReportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReviewerReportResponse>> ReviewerReportGetAsyncWithHttpInfo (int? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="content"> (optional)</param>
        /// <param name="botId"> (optional)</param>
        /// <param name="hasFeedback"> (optional)</param>
        /// <param name="conflicted"> (optional)</param>
        /// <param name="feedbacks"> (optional)</param>
        /// <param name="reasons"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <returns>Task of PagingResponseReviewerReportsResponse</returns>
        System.Threading.Tasks.Task<PagingResponseReviewerReportsResponse> ReviewerReportsGetAsync (string content = null, int? botId = null, bool? hasFeedback = null, bool? conflicted = null, List<int?> feedbacks = null, List<int?> reasons = null, int? pageNumber = null, int? pageSize = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="content"> (optional)</param>
        /// <param name="botId"> (optional)</param>
        /// <param name="hasFeedback"> (optional)</param>
        /// <param name="conflicted"> (optional)</param>
        /// <param name="feedbacks"> (optional)</param>
        /// <param name="reasons"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <returns>Task of ApiResponse (PagingResponseReviewerReportsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagingResponseReviewerReportsResponse>> ReviewerReportsGetAsyncWithHttpInfo (string content = null, int? botId = null, bool? hasFeedback = null, bool? conflicted = null, List<int?> feedbacks = null, List<int?> reasons = null, int? pageNumber = null, int? pageSize = null);
        /// <summary>
        /// Lists all pending review
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ReviewerSendFeedbackPostAsync (SendFeedbackRequest request = null);

        /// <summary>
        /// Lists all pending review
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ReviewerSendFeedbackPostAsyncWithHttpInfo (SendFeedbackRequest request = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ReviewerApi : IReviewerApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ReviewerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReviewerApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReviewerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ReviewerApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardName"> (optional)</param>
        /// <returns>int?</returns>
        public int? ReviewerBotByDashboardGet (string dashboardName = null)
        {
             ApiResponse<int?> localVarResponse = ReviewerBotByDashboardGetWithHttpInfo(dashboardName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardName"> (optional)</param>
        /// <returns>ApiResponse of int?</returns>
        public ApiResponse< int? > ReviewerBotByDashboardGetWithHttpInfo (string dashboardName = null)
        {

            var localVarPath = "/Reviewer/BotByDashboard";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dashboardName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "dashboardName", dashboardName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReviewerBotByDashboardGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (int?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardName"> (optional)</param>
        /// <returns>Task of int?</returns>
        public async System.Threading.Tasks.Task<int?> ReviewerBotByDashboardGetAsync (string dashboardName = null)
        {
             ApiResponse<int?> localVarResponse = await ReviewerBotByDashboardGetAsyncWithHttpInfo(dashboardName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardName"> (optional)</param>
        /// <returns>Task of ApiResponse (int?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<int?>> ReviewerBotByDashboardGetAsyncWithHttpInfo (string dashboardName = null)
        {

            var localVarPath = "/Reviewer/BotByDashboard";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dashboardName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "dashboardName", dashboardName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReviewerBotByDashboardGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (int?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentUrl"> (optional)</param>
        /// <returns>List&lt;ReviewerCheckResponse&gt;</returns>
        public List<ReviewerCheckResponse> ReviewerCheckGet (string contentUrl = null)
        {
             ApiResponse<List<ReviewerCheckResponse>> localVarResponse = ReviewerCheckGetWithHttpInfo(contentUrl);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentUrl"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ReviewerCheckResponse&gt;</returns>
        public ApiResponse< List<ReviewerCheckResponse> > ReviewerCheckGetWithHttpInfo (string contentUrl = null)
        {

            var localVarPath = "/Reviewer/Check";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentUrl != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "contentUrl", contentUrl)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReviewerCheckGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ReviewerCheckResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ReviewerCheckResponse>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ReviewerCheckResponse>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentUrl"> (optional)</param>
        /// <returns>Task of List&lt;ReviewerCheckResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<ReviewerCheckResponse>> ReviewerCheckGetAsync (string contentUrl = null)
        {
             ApiResponse<List<ReviewerCheckResponse>> localVarResponse = await ReviewerCheckGetAsyncWithHttpInfo(contentUrl);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentUrl"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ReviewerCheckResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ReviewerCheckResponse>>> ReviewerCheckGetAsyncWithHttpInfo (string contentUrl = null)
        {

            var localVarPath = "/Reviewer/Check";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentUrl != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "contentUrl", contentUrl)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReviewerCheckGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ReviewerCheckResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ReviewerCheckResponse>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ReviewerCheckResponse>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns></returns>
        public void ReviewerClearFeedbackPost (ClearFeedbackRequest request = null)
        {
             ReviewerClearFeedbackPostWithHttpInfo(request);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ReviewerClearFeedbackPostWithHttpInfo (ClearFeedbackRequest request = null)
        {

            var localVarPath = "/Reviewer/ClearFeedback";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReviewerClearFeedbackPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ReviewerClearFeedbackPostAsync (ClearFeedbackRequest request = null)
        {
             await ReviewerClearFeedbackPostAsyncWithHttpInfo(request);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ReviewerClearFeedbackPostAsyncWithHttpInfo (ClearFeedbackRequest request = null)
        {

            var localVarPath = "/Reviewer/ClearFeedback";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReviewerClearFeedbackPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ReviewerDashboardsResponse&gt;</returns>
        public List<ReviewerDashboardsResponse> ReviewerDashboardsGet ()
        {
             ApiResponse<List<ReviewerDashboardsResponse>> localVarResponse = ReviewerDashboardsGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ReviewerDashboardsResponse&gt;</returns>
        public ApiResponse< List<ReviewerDashboardsResponse> > ReviewerDashboardsGetWithHttpInfo ()
        {

            var localVarPath = "/Reviewer/Dashboards";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReviewerDashboardsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ReviewerDashboardsResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ReviewerDashboardsResponse>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ReviewerDashboardsResponse>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ReviewerDashboardsResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<ReviewerDashboardsResponse>> ReviewerDashboardsGetAsync ()
        {
             ApiResponse<List<ReviewerDashboardsResponse>> localVarResponse = await ReviewerDashboardsGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ReviewerDashboardsResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ReviewerDashboardsResponse>>> ReviewerDashboardsGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/Reviewer/Dashboards";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReviewerDashboardsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ReviewerDashboardsResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ReviewerDashboardsResponse>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ReviewerDashboardsResponse>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardName"> (optional)</param>
        /// <returns>List&lt;ReviewerFeedbacksResponse&gt;</returns>
        public List<ReviewerFeedbacksResponse> ReviewerFeedbacksGet (string dashboardName = null)
        {
             ApiResponse<List<ReviewerFeedbacksResponse>> localVarResponse = ReviewerFeedbacksGetWithHttpInfo(dashboardName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardName"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ReviewerFeedbacksResponse&gt;</returns>
        public ApiResponse< List<ReviewerFeedbacksResponse> > ReviewerFeedbacksGetWithHttpInfo (string dashboardName = null)
        {

            var localVarPath = "/Reviewer/Feedbacks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dashboardName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "dashboardName", dashboardName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReviewerFeedbacksGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ReviewerFeedbacksResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ReviewerFeedbacksResponse>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ReviewerFeedbacksResponse>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardName"> (optional)</param>
        /// <returns>Task of List&lt;ReviewerFeedbacksResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<ReviewerFeedbacksResponse>> ReviewerFeedbacksGetAsync (string dashboardName = null)
        {
             ApiResponse<List<ReviewerFeedbacksResponse>> localVarResponse = await ReviewerFeedbacksGetAsyncWithHttpInfo(dashboardName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardName"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ReviewerFeedbacksResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ReviewerFeedbacksResponse>>> ReviewerFeedbacksGetAsyncWithHttpInfo (string dashboardName = null)
        {

            var localVarPath = "/Reviewer/Feedbacks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dashboardName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "dashboardName", dashboardName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReviewerFeedbacksGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ReviewerFeedbacksResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ReviewerFeedbacksResponse>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ReviewerFeedbacksResponse>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastId"> (optional)</param>
        /// <returns>ReviewerReportResponse</returns>
        public ReviewerReportResponse ReviewerNextReviewGet (int? lastId = null)
        {
             ApiResponse<ReviewerReportResponse> localVarResponse = ReviewerNextReviewGetWithHttpInfo(lastId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastId"> (optional)</param>
        /// <returns>ApiResponse of ReviewerReportResponse</returns>
        public ApiResponse< ReviewerReportResponse > ReviewerNextReviewGetWithHttpInfo (int? lastId = null)
        {

            var localVarPath = "/Reviewer/NextReview";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lastId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "lastId", lastId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReviewerNextReviewGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReviewerReportResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReviewerReportResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReviewerReportResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastId"> (optional)</param>
        /// <returns>Task of ReviewerReportResponse</returns>
        public async System.Threading.Tasks.Task<ReviewerReportResponse> ReviewerNextReviewGetAsync (int? lastId = null)
        {
             ApiResponse<ReviewerReportResponse> localVarResponse = await ReviewerNextReviewGetAsyncWithHttpInfo(lastId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastId"> (optional)</param>
        /// <returns>Task of ApiResponse (ReviewerReportResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReviewerReportResponse>> ReviewerNextReviewGetAsyncWithHttpInfo (int? lastId = null)
        {

            var localVarPath = "/Reviewer/NextReview";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lastId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "lastId", lastId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReviewerNextReviewGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReviewerReportResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReviewerReportResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReviewerReportResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardName"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <returns>PagingResponseInt32</returns>
        public PagingResponseInt32 ReviewerPendingReviewsGet (string dashboardName = null, int? pageNumber = null, int? pageSize = null)
        {
             ApiResponse<PagingResponseInt32> localVarResponse = ReviewerPendingReviewsGetWithHttpInfo(dashboardName, pageNumber, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardName"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <returns>ApiResponse of PagingResponseInt32</returns>
        public ApiResponse< PagingResponseInt32 > ReviewerPendingReviewsGetWithHttpInfo (string dashboardName = null, int? pageNumber = null, int? pageSize = null)
        {

            var localVarPath = "/Reviewer/PendingReviews";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dashboardName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "dashboardName", dashboardName)); // query parameter
            if (pageNumber != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "PageNumber", pageNumber)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "PageSize", pageSize)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReviewerPendingReviewsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagingResponseInt32>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagingResponseInt32) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagingResponseInt32)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardName"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <returns>Task of PagingResponseInt32</returns>
        public async System.Threading.Tasks.Task<PagingResponseInt32> ReviewerPendingReviewsGetAsync (string dashboardName = null, int? pageNumber = null, int? pageSize = null)
        {
             ApiResponse<PagingResponseInt32> localVarResponse = await ReviewerPendingReviewsGetAsyncWithHttpInfo(dashboardName, pageNumber, pageSize);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardName"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <returns>Task of ApiResponse (PagingResponseInt32)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagingResponseInt32>> ReviewerPendingReviewsGetAsyncWithHttpInfo (string dashboardName = null, int? pageNumber = null, int? pageSize = null)
        {

            var localVarPath = "/Reviewer/PendingReviews";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dashboardName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "dashboardName", dashboardName)); // query parameter
            if (pageNumber != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "PageNumber", pageNumber)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "PageSize", pageSize)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReviewerPendingReviewsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagingResponseInt32>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagingResponseInt32) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagingResponseInt32)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardName"> (optional)</param>
        /// <returns>List&lt;ReviewerReasonsResponse&gt;</returns>
        public List<ReviewerReasonsResponse> ReviewerReasonsGet (string dashboardName = null)
        {
             ApiResponse<List<ReviewerReasonsResponse>> localVarResponse = ReviewerReasonsGetWithHttpInfo(dashboardName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardName"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ReviewerReasonsResponse&gt;</returns>
        public ApiResponse< List<ReviewerReasonsResponse> > ReviewerReasonsGetWithHttpInfo (string dashboardName = null)
        {

            var localVarPath = "/Reviewer/Reasons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dashboardName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "dashboardName", dashboardName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReviewerReasonsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ReviewerReasonsResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ReviewerReasonsResponse>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ReviewerReasonsResponse>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardName"> (optional)</param>
        /// <returns>Task of List&lt;ReviewerReasonsResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<ReviewerReasonsResponse>> ReviewerReasonsGetAsync (string dashboardName = null)
        {
             ApiResponse<List<ReviewerReasonsResponse>> localVarResponse = await ReviewerReasonsGetAsyncWithHttpInfo(dashboardName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardName"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ReviewerReasonsResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ReviewerReasonsResponse>>> ReviewerReasonsGetAsyncWithHttpInfo (string dashboardName = null)
        {

            var localVarPath = "/Reviewer/Reasons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dashboardName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "dashboardName", dashboardName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReviewerReasonsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ReviewerReasonsResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ReviewerReasonsResponse>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ReviewerReasonsResponse>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ReviewerReportResponse</returns>
        public ReviewerReportResponse ReviewerReportGet (int? id)
        {
             ApiResponse<ReviewerReportResponse> localVarResponse = ReviewerReportGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ReviewerReportResponse</returns>
        public ApiResponse< ReviewerReportResponse > ReviewerReportGetWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ReviewerApi->ReviewerReportGet");

            var localVarPath = "/Reviewer/Report";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReviewerReportGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReviewerReportResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReviewerReportResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReviewerReportResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ReviewerReportResponse</returns>
        public async System.Threading.Tasks.Task<ReviewerReportResponse> ReviewerReportGetAsync (int? id)
        {
             ApiResponse<ReviewerReportResponse> localVarResponse = await ReviewerReportGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ReviewerReportResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReviewerReportResponse>> ReviewerReportGetAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ReviewerApi->ReviewerReportGet");

            var localVarPath = "/Reviewer/Report";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReviewerReportGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReviewerReportResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReviewerReportResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReviewerReportResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="content"> (optional)</param>
        /// <param name="botId"> (optional)</param>
        /// <param name="hasFeedback"> (optional)</param>
        /// <param name="conflicted"> (optional)</param>
        /// <param name="feedbacks"> (optional)</param>
        /// <param name="reasons"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <returns>PagingResponseReviewerReportsResponse</returns>
        public PagingResponseReviewerReportsResponse ReviewerReportsGet (string content = null, int? botId = null, bool? hasFeedback = null, bool? conflicted = null, List<int?> feedbacks = null, List<int?> reasons = null, int? pageNumber = null, int? pageSize = null)
        {
             ApiResponse<PagingResponseReviewerReportsResponse> localVarResponse = ReviewerReportsGetWithHttpInfo(content, botId, hasFeedback, conflicted, feedbacks, reasons, pageNumber, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="content"> (optional)</param>
        /// <param name="botId"> (optional)</param>
        /// <param name="hasFeedback"> (optional)</param>
        /// <param name="conflicted"> (optional)</param>
        /// <param name="feedbacks"> (optional)</param>
        /// <param name="reasons"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <returns>ApiResponse of PagingResponseReviewerReportsResponse</returns>
        public ApiResponse< PagingResponseReviewerReportsResponse > ReviewerReportsGetWithHttpInfo (string content = null, int? botId = null, bool? hasFeedback = null, bool? conflicted = null, List<int?> feedbacks = null, List<int?> reasons = null, int? pageNumber = null, int? pageSize = null)
        {

            var localVarPath = "/Reviewer/Reports";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (content != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "Content", content)); // query parameter
            if (botId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "BotId", botId)); // query parameter
            if (hasFeedback != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "HasFeedback", hasFeedback)); // query parameter
            if (conflicted != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "Conflicted", conflicted)); // query parameter
            if (feedbacks != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "Feedbacks", feedbacks)); // query parameter
            if (reasons != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "Reasons", reasons)); // query parameter
            if (pageNumber != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "PageNumber", pageNumber)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "PageSize", pageSize)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReviewerReportsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagingResponseReviewerReportsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagingResponseReviewerReportsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagingResponseReviewerReportsResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="content"> (optional)</param>
        /// <param name="botId"> (optional)</param>
        /// <param name="hasFeedback"> (optional)</param>
        /// <param name="conflicted"> (optional)</param>
        /// <param name="feedbacks"> (optional)</param>
        /// <param name="reasons"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <returns>Task of PagingResponseReviewerReportsResponse</returns>
        public async System.Threading.Tasks.Task<PagingResponseReviewerReportsResponse> ReviewerReportsGetAsync (string content = null, int? botId = null, bool? hasFeedback = null, bool? conflicted = null, List<int?> feedbacks = null, List<int?> reasons = null, int? pageNumber = null, int? pageSize = null)
        {
             ApiResponse<PagingResponseReviewerReportsResponse> localVarResponse = await ReviewerReportsGetAsyncWithHttpInfo(content, botId, hasFeedback, conflicted, feedbacks, reasons, pageNumber, pageSize);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="content"> (optional)</param>
        /// <param name="botId"> (optional)</param>
        /// <param name="hasFeedback"> (optional)</param>
        /// <param name="conflicted"> (optional)</param>
        /// <param name="feedbacks"> (optional)</param>
        /// <param name="reasons"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <returns>Task of ApiResponse (PagingResponseReviewerReportsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagingResponseReviewerReportsResponse>> ReviewerReportsGetAsyncWithHttpInfo (string content = null, int? botId = null, bool? hasFeedback = null, bool? conflicted = null, List<int?> feedbacks = null, List<int?> reasons = null, int? pageNumber = null, int? pageSize = null)
        {

            var localVarPath = "/Reviewer/Reports";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (content != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "Content", content)); // query parameter
            if (botId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "BotId", botId)); // query parameter
            if (hasFeedback != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "HasFeedback", hasFeedback)); // query parameter
            if (conflicted != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "Conflicted", conflicted)); // query parameter
            if (feedbacks != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "Feedbacks", feedbacks)); // query parameter
            if (reasons != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "Reasons", reasons)); // query parameter
            if (pageNumber != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "PageNumber", pageNumber)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "PageSize", pageSize)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReviewerReportsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagingResponseReviewerReportsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagingResponseReviewerReportsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagingResponseReviewerReportsResponse)));
        }

        /// <summary>
        /// Lists all pending review 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns></returns>
        public void ReviewerSendFeedbackPost (SendFeedbackRequest request = null)
        {
             ReviewerSendFeedbackPostWithHttpInfo(request);
        }

        /// <summary>
        /// Lists all pending review 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ReviewerSendFeedbackPostWithHttpInfo (SendFeedbackRequest request = null)
        {

            var localVarPath = "/Reviewer/SendFeedback";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReviewerSendFeedbackPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Lists all pending review 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ReviewerSendFeedbackPostAsync (SendFeedbackRequest request = null)
        {
             await ReviewerSendFeedbackPostAsyncWithHttpInfo(request);

        }

        /// <summary>
        /// Lists all pending review 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ReviewerSendFeedbackPostAsyncWithHttpInfo (SendFeedbackRequest request = null)
        {

            var localVarPath = "/Reviewer/SendFeedback";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReviewerSendFeedbackPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
