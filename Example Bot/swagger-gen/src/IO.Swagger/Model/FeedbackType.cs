/* 
 * Higgs API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// FeedbackType
    /// </summary>
    [DataContract]
    public partial class FeedbackType :  IEquatable<FeedbackType>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FeedbackType" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FeedbackType() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FeedbackType" /> class.
        /// </summary>
        /// <param name="Name">The name of the feedback type. Will be displayed on the dashboard. Must be unique per bot. (required).</param>
        /// <param name="Colour">The colour of the button reviewers will see when providing feedback.</param>
        /// <param name="Icon">A link to a feedback icon..</param>
        /// <param name="IsActionable">Whether or not this feedback is actionable.</param>
        /// <param name="RequiredActions">Number of required votes to mark the post as actioned.</param>
        public FeedbackType(string Name = default(string), string Colour = default(string), string Icon = default(string), bool? IsActionable = default(bool?), int? RequiredActions = default(int?))
        {
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for FeedbackType and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            this.Colour = Colour;
            this.Icon = Icon;
            this.IsActionable = IsActionable;
            this.RequiredActions = RequiredActions;
        }
        
        /// <summary>
        /// The name of the feedback type. Will be displayed on the dashboard. Must be unique per bot.
        /// </summary>
        /// <value>The name of the feedback type. Will be displayed on the dashboard. Must be unique per bot.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The colour of the button reviewers will see when providing feedback
        /// </summary>
        /// <value>The colour of the button reviewers will see when providing feedback</value>
        [DataMember(Name="colour", EmitDefaultValue=false)]
        public string Colour { get; set; }

        /// <summary>
        /// A link to a feedback icon.
        /// </summary>
        /// <value>A link to a feedback icon.</value>
        [DataMember(Name="icon", EmitDefaultValue=false)]
        public string Icon { get; set; }

        /// <summary>
        /// Whether or not this feedback is actionable
        /// </summary>
        /// <value>Whether or not this feedback is actionable</value>
        [DataMember(Name="isActionable", EmitDefaultValue=false)]
        public bool? IsActionable { get; set; }

        /// <summary>
        /// Number of required votes to mark the post as actioned
        /// </summary>
        /// <value>Number of required votes to mark the post as actioned</value>
        [DataMember(Name="requiredActions", EmitDefaultValue=false)]
        public int? RequiredActions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FeedbackType {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Colour: ").Append(Colour).Append("\n");
            sb.Append("  Icon: ").Append(Icon).Append("\n");
            sb.Append("  IsActionable: ").Append(IsActionable).Append("\n");
            sb.Append("  RequiredActions: ").Append(RequiredActions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FeedbackType);
        }

        /// <summary>
        /// Returns true if FeedbackType instances are equal
        /// </summary>
        /// <param name="input">Instance of FeedbackType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FeedbackType input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Colour == input.Colour ||
                    (this.Colour != null &&
                    this.Colour.Equals(input.Colour))
                ) && 
                (
                    this.Icon == input.Icon ||
                    (this.Icon != null &&
                    this.Icon.Equals(input.Icon))
                ) && 
                (
                    this.IsActionable == input.IsActionable ||
                    (this.IsActionable != null &&
                    this.IsActionable.Equals(input.IsActionable))
                ) && 
                (
                    this.RequiredActions == input.RequiredActions ||
                    (this.RequiredActions != null &&
                    this.RequiredActions.Equals(input.RequiredActions))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Colour != null)
                    hashCode = hashCode * 59 + this.Colour.GetHashCode();
                if (this.Icon != null)
                    hashCode = hashCode * 59 + this.Icon.GetHashCode();
                if (this.IsActionable != null)
                    hashCode = hashCode * 59 + this.IsActionable.GetHashCode();
                if (this.RequiredActions != null)
                    hashCode = hashCode * 59 + this.RequiredActions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
