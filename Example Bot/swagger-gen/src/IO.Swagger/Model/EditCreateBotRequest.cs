/* 
 * Higgs API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// EditCreateBotRequest
    /// </summary>
    [DataContract]
    public partial class EditCreateBotRequest :  IEquatable<EditCreateBotRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EditCreateBotRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EditCreateBotRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EditCreateBotRequest" /> class.
        /// </summary>
        /// <param name="BotId">BotId (required).</param>
        /// <param name="Secret">Secret.</param>
        /// <param name="Name">Name of the bot (required).</param>
        /// <param name="DashboardName">Name of the dashboard (required).</param>
        /// <param name="Description">Description of the bot (required).</param>
        /// <param name="Homepage">Homepage.</param>
        /// <param name="LogoUrl">LogoUrl.</param>
        /// <param name="FavIcon">FavIcon.</param>
        /// <param name="TabTitle">TabTitle.</param>
        public EditCreateBotRequest(int? BotId = default(int?), string Secret = default(string), string Name = default(string), string DashboardName = default(string), string Description = default(string), string Homepage = default(string), string LogoUrl = default(string), string FavIcon = default(string), string TabTitle = default(string))
        {
            // to ensure "BotId" is required (not null)
            if (BotId == null)
            {
                throw new InvalidDataException("BotId is a required property for EditCreateBotRequest and cannot be null");
            }
            else
            {
                this.BotId = BotId;
            }
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for EditCreateBotRequest and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "DashboardName" is required (not null)
            if (DashboardName == null)
            {
                throw new InvalidDataException("DashboardName is a required property for EditCreateBotRequest and cannot be null");
            }
            else
            {
                this.DashboardName = DashboardName;
            }
            // to ensure "Description" is required (not null)
            if (Description == null)
            {
                throw new InvalidDataException("Description is a required property for EditCreateBotRequest and cannot be null");
            }
            else
            {
                this.Description = Description;
            }
            this.Secret = Secret;
            this.Homepage = Homepage;
            this.LogoUrl = LogoUrl;
            this.FavIcon = FavIcon;
            this.TabTitle = TabTitle;
        }
        
        /// <summary>
        /// Gets or Sets BotId
        /// </summary>
        [DataMember(Name="botId", EmitDefaultValue=false)]
        public int? BotId { get; set; }

        /// <summary>
        /// Gets or Sets Secret
        /// </summary>
        [DataMember(Name="secret", EmitDefaultValue=false)]
        public string Secret { get; set; }

        /// <summary>
        /// Name of the bot
        /// </summary>
        /// <value>Name of the bot</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Name of the dashboard
        /// </summary>
        /// <value>Name of the dashboard</value>
        [DataMember(Name="dashboardName", EmitDefaultValue=false)]
        public string DashboardName { get; set; }

        /// <summary>
        /// Description of the bot
        /// </summary>
        /// <value>Description of the bot</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Homepage
        /// </summary>
        [DataMember(Name="homepage", EmitDefaultValue=false)]
        public string Homepage { get; set; }

        /// <summary>
        /// Gets or Sets LogoUrl
        /// </summary>
        [DataMember(Name="logoUrl", EmitDefaultValue=false)]
        public string LogoUrl { get; set; }

        /// <summary>
        /// Gets or Sets FavIcon
        /// </summary>
        [DataMember(Name="favIcon", EmitDefaultValue=false)]
        public string FavIcon { get; set; }

        /// <summary>
        /// Gets or Sets TabTitle
        /// </summary>
        [DataMember(Name="tabTitle", EmitDefaultValue=false)]
        public string TabTitle { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EditCreateBotRequest {\n");
            sb.Append("  BotId: ").Append(BotId).Append("\n");
            sb.Append("  Secret: ").Append(Secret).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DashboardName: ").Append(DashboardName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Homepage: ").Append(Homepage).Append("\n");
            sb.Append("  LogoUrl: ").Append(LogoUrl).Append("\n");
            sb.Append("  FavIcon: ").Append(FavIcon).Append("\n");
            sb.Append("  TabTitle: ").Append(TabTitle).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EditCreateBotRequest);
        }

        /// <summary>
        /// Returns true if EditCreateBotRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of EditCreateBotRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EditCreateBotRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BotId == input.BotId ||
                    (this.BotId != null &&
                    this.BotId.Equals(input.BotId))
                ) && 
                (
                    this.Secret == input.Secret ||
                    (this.Secret != null &&
                    this.Secret.Equals(input.Secret))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.DashboardName == input.DashboardName ||
                    (this.DashboardName != null &&
                    this.DashboardName.Equals(input.DashboardName))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Homepage == input.Homepage ||
                    (this.Homepage != null &&
                    this.Homepage.Equals(input.Homepage))
                ) && 
                (
                    this.LogoUrl == input.LogoUrl ||
                    (this.LogoUrl != null &&
                    this.LogoUrl.Equals(input.LogoUrl))
                ) && 
                (
                    this.FavIcon == input.FavIcon ||
                    (this.FavIcon != null &&
                    this.FavIcon.Equals(input.FavIcon))
                ) && 
                (
                    this.TabTitle == input.TabTitle ||
                    (this.TabTitle != null &&
                    this.TabTitle.Equals(input.TabTitle))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BotId != null)
                    hashCode = hashCode * 59 + this.BotId.GetHashCode();
                if (this.Secret != null)
                    hashCode = hashCode * 59 + this.Secret.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.DashboardName != null)
                    hashCode = hashCode * 59 + this.DashboardName.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Homepage != null)
                    hashCode = hashCode * 59 + this.Homepage.GetHashCode();
                if (this.LogoUrl != null)
                    hashCode = hashCode * 59 + this.LogoUrl.GetHashCode();
                if (this.FavIcon != null)
                    hashCode = hashCode * 59 + this.FavIcon.GetHashCode();
                if (this.TabTitle != null)
                    hashCode = hashCode * 59 + this.TabTitle.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
