/* 
 * Higgs API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ReviewerReportResponse
    /// </summary>
    [DataContract]
    public partial class ReviewerReportResponse :  IEquatable<ReviewerReportResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReviewerReportResponse" /> class.
        /// </summary>
        /// <param name="Title">Title.</param>
        /// <param name="BotLogo">BotLogo.</param>
        /// <param name="BotName">BotName.</param>
        /// <param name="DashboardName">DashboardName.</param>
        /// <param name="TabTitle">TabTitle.</param>
        /// <param name="FavIcon">FavIcon.</param>
        /// <param name="BotHomePage">BotHomePage.</param>
        /// <param name="ContentUrl">ContentUrl.</param>
        /// <param name="ContentSite">ContentSite.</param>
        /// <param name="ContentType">ContentType.</param>
        /// <param name="ContentId">ContentId.</param>
        /// <param name="DetectionScore">DetectionScore.</param>
        /// <param name="ContentFragments">ContentFragments.</param>
        /// <param name="AuthorName">AuthorName.</param>
        /// <param name="AuthorReputation">AuthorReputation.</param>
        /// <param name="ContentCreationDate">ContentCreationDate.</param>
        /// <param name="DetectedDate">DetectedDate.</param>
        /// <param name="Reasons">Reasons.</param>
        /// <param name="AllowedFeedback">AllowedFeedback.</param>
        /// <param name="Feedback">Feedback.</param>
        public ReviewerReportResponse(string Title = default(string), string BotLogo = default(string), string BotName = default(string), string DashboardName = default(string), string TabTitle = default(string), string FavIcon = default(string), string BotHomePage = default(string), string ContentUrl = default(string), string ContentSite = default(string), string ContentType = default(string), int? ContentId = default(int?), double? DetectionScore = default(double?), List<ReviewerReportContentFragmentResponse> ContentFragments = default(List<ReviewerReportContentFragmentResponse>), string AuthorName = default(string), int? AuthorReputation = default(int?), DateTime? ContentCreationDate = default(DateTime?), DateTime? DetectedDate = default(DateTime?), List<ReviewerReportReasonResponse> Reasons = default(List<ReviewerReportReasonResponse>), List<ReviewerReportAllowedFeedbackResponse> AllowedFeedback = default(List<ReviewerReportAllowedFeedbackResponse>), List<ReviewerReportFeedbackResponse> Feedback = default(List<ReviewerReportFeedbackResponse>))
        {
            this.Title = Title;
            this.BotLogo = BotLogo;
            this.BotName = BotName;
            this.DashboardName = DashboardName;
            this.TabTitle = TabTitle;
            this.FavIcon = FavIcon;
            this.BotHomePage = BotHomePage;
            this.ContentUrl = ContentUrl;
            this.ContentSite = ContentSite;
            this.ContentType = ContentType;
            this.ContentId = ContentId;
            this.DetectionScore = DetectionScore;
            this.ContentFragments = ContentFragments;
            this.AuthorName = AuthorName;
            this.AuthorReputation = AuthorReputation;
            this.ContentCreationDate = ContentCreationDate;
            this.DetectedDate = DetectedDate;
            this.Reasons = Reasons;
            this.AllowedFeedback = AllowedFeedback;
            this.Feedback = Feedback;
        }
        
        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets BotLogo
        /// </summary>
        [DataMember(Name="botLogo", EmitDefaultValue=false)]
        public string BotLogo { get; set; }

        /// <summary>
        /// Gets or Sets BotName
        /// </summary>
        [DataMember(Name="botName", EmitDefaultValue=false)]
        public string BotName { get; set; }

        /// <summary>
        /// Gets or Sets DashboardName
        /// </summary>
        [DataMember(Name="dashboardName", EmitDefaultValue=false)]
        public string DashboardName { get; set; }

        /// <summary>
        /// Gets or Sets TabTitle
        /// </summary>
        [DataMember(Name="tabTitle", EmitDefaultValue=false)]
        public string TabTitle { get; set; }

        /// <summary>
        /// Gets or Sets FavIcon
        /// </summary>
        [DataMember(Name="favIcon", EmitDefaultValue=false)]
        public string FavIcon { get; set; }

        /// <summary>
        /// Gets or Sets BotHomePage
        /// </summary>
        [DataMember(Name="botHomePage", EmitDefaultValue=false)]
        public string BotHomePage { get; set; }

        /// <summary>
        /// Gets or Sets ContentUrl
        /// </summary>
        [DataMember(Name="contentUrl", EmitDefaultValue=false)]
        public string ContentUrl { get; set; }

        /// <summary>
        /// Gets or Sets ContentSite
        /// </summary>
        [DataMember(Name="contentSite", EmitDefaultValue=false)]
        public string ContentSite { get; set; }

        /// <summary>
        /// Gets or Sets ContentType
        /// </summary>
        [DataMember(Name="contentType", EmitDefaultValue=false)]
        public string ContentType { get; set; }

        /// <summary>
        /// Gets or Sets ContentId
        /// </summary>
        [DataMember(Name="contentId", EmitDefaultValue=false)]
        public int? ContentId { get; set; }

        /// <summary>
        /// Gets or Sets DetectionScore
        /// </summary>
        [DataMember(Name="detectionScore", EmitDefaultValue=false)]
        public double? DetectionScore { get; set; }

        /// <summary>
        /// Gets or Sets ContentFragments
        /// </summary>
        [DataMember(Name="contentFragments", EmitDefaultValue=false)]
        public List<ReviewerReportContentFragmentResponse> ContentFragments { get; set; }

        /// <summary>
        /// Gets or Sets AuthorName
        /// </summary>
        [DataMember(Name="authorName", EmitDefaultValue=false)]
        public string AuthorName { get; set; }

        /// <summary>
        /// Gets or Sets AuthorReputation
        /// </summary>
        [DataMember(Name="authorReputation", EmitDefaultValue=false)]
        public int? AuthorReputation { get; set; }

        /// <summary>
        /// Gets or Sets ContentCreationDate
        /// </summary>
        [DataMember(Name="contentCreationDate", EmitDefaultValue=false)]
        public DateTime? ContentCreationDate { get; set; }

        /// <summary>
        /// Gets or Sets DetectedDate
        /// </summary>
        [DataMember(Name="detectedDate", EmitDefaultValue=false)]
        public DateTime? DetectedDate { get; set; }

        /// <summary>
        /// Gets or Sets Reasons
        /// </summary>
        [DataMember(Name="reasons", EmitDefaultValue=false)]
        public List<ReviewerReportReasonResponse> Reasons { get; set; }

        /// <summary>
        /// Gets or Sets AllowedFeedback
        /// </summary>
        [DataMember(Name="allowedFeedback", EmitDefaultValue=false)]
        public List<ReviewerReportAllowedFeedbackResponse> AllowedFeedback { get; set; }

        /// <summary>
        /// Gets or Sets Feedback
        /// </summary>
        [DataMember(Name="feedback", EmitDefaultValue=false)]
        public List<ReviewerReportFeedbackResponse> Feedback { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReviewerReportResponse {\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  BotLogo: ").Append(BotLogo).Append("\n");
            sb.Append("  BotName: ").Append(BotName).Append("\n");
            sb.Append("  DashboardName: ").Append(DashboardName).Append("\n");
            sb.Append("  TabTitle: ").Append(TabTitle).Append("\n");
            sb.Append("  FavIcon: ").Append(FavIcon).Append("\n");
            sb.Append("  BotHomePage: ").Append(BotHomePage).Append("\n");
            sb.Append("  ContentUrl: ").Append(ContentUrl).Append("\n");
            sb.Append("  ContentSite: ").Append(ContentSite).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  ContentId: ").Append(ContentId).Append("\n");
            sb.Append("  DetectionScore: ").Append(DetectionScore).Append("\n");
            sb.Append("  ContentFragments: ").Append(ContentFragments).Append("\n");
            sb.Append("  AuthorName: ").Append(AuthorName).Append("\n");
            sb.Append("  AuthorReputation: ").Append(AuthorReputation).Append("\n");
            sb.Append("  ContentCreationDate: ").Append(ContentCreationDate).Append("\n");
            sb.Append("  DetectedDate: ").Append(DetectedDate).Append("\n");
            sb.Append("  Reasons: ").Append(Reasons).Append("\n");
            sb.Append("  AllowedFeedback: ").Append(AllowedFeedback).Append("\n");
            sb.Append("  Feedback: ").Append(Feedback).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReviewerReportResponse);
        }

        /// <summary>
        /// Returns true if ReviewerReportResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ReviewerReportResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReviewerReportResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.BotLogo == input.BotLogo ||
                    (this.BotLogo != null &&
                    this.BotLogo.Equals(input.BotLogo))
                ) && 
                (
                    this.BotName == input.BotName ||
                    (this.BotName != null &&
                    this.BotName.Equals(input.BotName))
                ) && 
                (
                    this.DashboardName == input.DashboardName ||
                    (this.DashboardName != null &&
                    this.DashboardName.Equals(input.DashboardName))
                ) && 
                (
                    this.TabTitle == input.TabTitle ||
                    (this.TabTitle != null &&
                    this.TabTitle.Equals(input.TabTitle))
                ) && 
                (
                    this.FavIcon == input.FavIcon ||
                    (this.FavIcon != null &&
                    this.FavIcon.Equals(input.FavIcon))
                ) && 
                (
                    this.BotHomePage == input.BotHomePage ||
                    (this.BotHomePage != null &&
                    this.BotHomePage.Equals(input.BotHomePage))
                ) && 
                (
                    this.ContentUrl == input.ContentUrl ||
                    (this.ContentUrl != null &&
                    this.ContentUrl.Equals(input.ContentUrl))
                ) && 
                (
                    this.ContentSite == input.ContentSite ||
                    (this.ContentSite != null &&
                    this.ContentSite.Equals(input.ContentSite))
                ) && 
                (
                    this.ContentType == input.ContentType ||
                    (this.ContentType != null &&
                    this.ContentType.Equals(input.ContentType))
                ) && 
                (
                    this.ContentId == input.ContentId ||
                    (this.ContentId != null &&
                    this.ContentId.Equals(input.ContentId))
                ) && 
                (
                    this.DetectionScore == input.DetectionScore ||
                    (this.DetectionScore != null &&
                    this.DetectionScore.Equals(input.DetectionScore))
                ) && 
                (
                    this.ContentFragments == input.ContentFragments ||
                    this.ContentFragments != null &&
                    this.ContentFragments.SequenceEqual(input.ContentFragments)
                ) && 
                (
                    this.AuthorName == input.AuthorName ||
                    (this.AuthorName != null &&
                    this.AuthorName.Equals(input.AuthorName))
                ) && 
                (
                    this.AuthorReputation == input.AuthorReputation ||
                    (this.AuthorReputation != null &&
                    this.AuthorReputation.Equals(input.AuthorReputation))
                ) && 
                (
                    this.ContentCreationDate == input.ContentCreationDate ||
                    (this.ContentCreationDate != null &&
                    this.ContentCreationDate.Equals(input.ContentCreationDate))
                ) && 
                (
                    this.DetectedDate == input.DetectedDate ||
                    (this.DetectedDate != null &&
                    this.DetectedDate.Equals(input.DetectedDate))
                ) && 
                (
                    this.Reasons == input.Reasons ||
                    this.Reasons != null &&
                    this.Reasons.SequenceEqual(input.Reasons)
                ) && 
                (
                    this.AllowedFeedback == input.AllowedFeedback ||
                    this.AllowedFeedback != null &&
                    this.AllowedFeedback.SequenceEqual(input.AllowedFeedback)
                ) && 
                (
                    this.Feedback == input.Feedback ||
                    this.Feedback != null &&
                    this.Feedback.SequenceEqual(input.Feedback)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.BotLogo != null)
                    hashCode = hashCode * 59 + this.BotLogo.GetHashCode();
                if (this.BotName != null)
                    hashCode = hashCode * 59 + this.BotName.GetHashCode();
                if (this.DashboardName != null)
                    hashCode = hashCode * 59 + this.DashboardName.GetHashCode();
                if (this.TabTitle != null)
                    hashCode = hashCode * 59 + this.TabTitle.GetHashCode();
                if (this.FavIcon != null)
                    hashCode = hashCode * 59 + this.FavIcon.GetHashCode();
                if (this.BotHomePage != null)
                    hashCode = hashCode * 59 + this.BotHomePage.GetHashCode();
                if (this.ContentUrl != null)
                    hashCode = hashCode * 59 + this.ContentUrl.GetHashCode();
                if (this.ContentSite != null)
                    hashCode = hashCode * 59 + this.ContentSite.GetHashCode();
                if (this.ContentType != null)
                    hashCode = hashCode * 59 + this.ContentType.GetHashCode();
                if (this.ContentId != null)
                    hashCode = hashCode * 59 + this.ContentId.GetHashCode();
                if (this.DetectionScore != null)
                    hashCode = hashCode * 59 + this.DetectionScore.GetHashCode();
                if (this.ContentFragments != null)
                    hashCode = hashCode * 59 + this.ContentFragments.GetHashCode();
                if (this.AuthorName != null)
                    hashCode = hashCode * 59 + this.AuthorName.GetHashCode();
                if (this.AuthorReputation != null)
                    hashCode = hashCode * 59 + this.AuthorReputation.GetHashCode();
                if (this.ContentCreationDate != null)
                    hashCode = hashCode * 59 + this.ContentCreationDate.GetHashCode();
                if (this.DetectedDate != null)
                    hashCode = hashCode * 59 + this.DetectedDate.GetHashCode();
                if (this.Reasons != null)
                    hashCode = hashCode * 59 + this.Reasons.GetHashCode();
                if (this.AllowedFeedback != null)
                    hashCode = hashCode * 59 + this.AllowedFeedback.GetHashCode();
                if (this.Feedback != null)
                    hashCode = hashCode * 59 + this.Feedback.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
