/* 
 * Higgs API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ReviewerCheckResponse
    /// </summary>
    [DataContract]
    public partial class ReviewerCheckResponse :  IEquatable<ReviewerCheckResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReviewerCheckResponse" /> class.
        /// </summary>
        /// <param name="Dashboard">Dashboard.</param>
        /// <param name="BotName">BotName.</param>
        /// <param name="ReportId">ReportId.</param>
        public ReviewerCheckResponse(string Dashboard = default(string), string BotName = default(string), int? ReportId = default(int?))
        {
            this.Dashboard = Dashboard;
            this.BotName = BotName;
            this.ReportId = ReportId;
        }
        
        /// <summary>
        /// Gets or Sets Dashboard
        /// </summary>
        [DataMember(Name="dashboard", EmitDefaultValue=false)]
        public string Dashboard { get; set; }

        /// <summary>
        /// Gets or Sets BotName
        /// </summary>
        [DataMember(Name="botName", EmitDefaultValue=false)]
        public string BotName { get; set; }

        /// <summary>
        /// Gets or Sets ReportId
        /// </summary>
        [DataMember(Name="reportId", EmitDefaultValue=false)]
        public int? ReportId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReviewerCheckResponse {\n");
            sb.Append("  Dashboard: ").Append(Dashboard).Append("\n");
            sb.Append("  BotName: ").Append(BotName).Append("\n");
            sb.Append("  ReportId: ").Append(ReportId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReviewerCheckResponse);
        }

        /// <summary>
        /// Returns true if ReviewerCheckResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ReviewerCheckResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReviewerCheckResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Dashboard == input.Dashboard ||
                    (this.Dashboard != null &&
                    this.Dashboard.Equals(input.Dashboard))
                ) && 
                (
                    this.BotName == input.BotName ||
                    (this.BotName != null &&
                    this.BotName.Equals(input.BotName))
                ) && 
                (
                    this.ReportId == input.ReportId ||
                    (this.ReportId != null &&
                    this.ReportId.Equals(input.ReportId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Dashboard != null)
                    hashCode = hashCode * 59 + this.Dashboard.GetHashCode();
                if (this.BotName != null)
                    hashCode = hashCode * 59 + this.BotName.GetHashCode();
                if (this.ReportId != null)
                    hashCode = hashCode * 59 + this.ReportId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
