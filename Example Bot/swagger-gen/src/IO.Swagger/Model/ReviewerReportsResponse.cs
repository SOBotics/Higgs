/* 
 * Higgs API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ReviewerReportsResponse
    /// </summary>
    [DataContract]
    public partial class ReviewerReportsResponse :  IEquatable<ReviewerReportsResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReviewerReportsResponse" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="Title">Title.</param>
        /// <param name="DashboardName">DashboardName.</param>
        /// <param name="DetectionScore">DetectionScore.</param>
        /// <param name="Feedback">Feedback.</param>
        public ReviewerReportsResponse(int? Id = default(int?), string Title = default(string), string DashboardName = default(string), double? DetectionScore = default(double?), List<ReviewerReportFeedbackResponse> Feedback = default(List<ReviewerReportFeedbackResponse>))
        {
            this.Id = Id;
            this.Title = Title;
            this.DashboardName = DashboardName;
            this.DetectionScore = DetectionScore;
            this.Feedback = Feedback;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets DashboardName
        /// </summary>
        [DataMember(Name="dashboardName", EmitDefaultValue=false)]
        public string DashboardName { get; set; }

        /// <summary>
        /// Gets or Sets DetectionScore
        /// </summary>
        [DataMember(Name="detectionScore", EmitDefaultValue=false)]
        public double? DetectionScore { get; set; }

        /// <summary>
        /// Gets or Sets Feedback
        /// </summary>
        [DataMember(Name="feedback", EmitDefaultValue=false)]
        public List<ReviewerReportFeedbackResponse> Feedback { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReviewerReportsResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  DashboardName: ").Append(DashboardName).Append("\n");
            sb.Append("  DetectionScore: ").Append(DetectionScore).Append("\n");
            sb.Append("  Feedback: ").Append(Feedback).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReviewerReportsResponse);
        }

        /// <summary>
        /// Returns true if ReviewerReportsResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ReviewerReportsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReviewerReportsResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.DashboardName == input.DashboardName ||
                    (this.DashboardName != null &&
                    this.DashboardName.Equals(input.DashboardName))
                ) && 
                (
                    this.DetectionScore == input.DetectionScore ||
                    (this.DetectionScore != null &&
                    this.DetectionScore.Equals(input.DetectionScore))
                ) && 
                (
                    this.Feedback == input.Feedback ||
                    this.Feedback != null &&
                    this.Feedback.SequenceEqual(input.Feedback)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.DashboardName != null)
                    hashCode = hashCode * 59 + this.DashboardName.GetHashCode();
                if (this.DetectionScore != null)
                    hashCode = hashCode * 59 + this.DetectionScore.GetHashCode();
                if (this.Feedback != null)
                    hashCode = hashCode * 59 + this.Feedback.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
