/* 
 * Higgs API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ReviewerReportReasonResponse
    /// </summary>
    [DataContract]
    public partial class ReviewerReportReasonResponse :  IEquatable<ReviewerReportReasonResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReviewerReportReasonResponse" /> class.
        /// </summary>
        /// <param name="ReasonId">ReasonId.</param>
        /// <param name="Name">Name.</param>
        /// <param name="Confidence">Confidence.</param>
        /// <param name="Tripped">Tripped.</param>
        /// <param name="Seen">Seen.</param>
        public ReviewerReportReasonResponse(int? ReasonId = default(int?), string Name = default(string), double? Confidence = default(double?), bool? Tripped = default(bool?), int? Seen = default(int?))
        {
            this.ReasonId = ReasonId;
            this.Name = Name;
            this.Confidence = Confidence;
            this.Tripped = Tripped;
            this.Seen = Seen;
        }
        
        /// <summary>
        /// Gets or Sets ReasonId
        /// </summary>
        [DataMember(Name="reasonId", EmitDefaultValue=false)]
        public int? ReasonId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Confidence
        /// </summary>
        [DataMember(Name="confidence", EmitDefaultValue=false)]
        public double? Confidence { get; set; }

        /// <summary>
        /// Gets or Sets Tripped
        /// </summary>
        [DataMember(Name="tripped", EmitDefaultValue=false)]
        public bool? Tripped { get; set; }

        /// <summary>
        /// Gets or Sets Seen
        /// </summary>
        [DataMember(Name="seen", EmitDefaultValue=false)]
        public int? Seen { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReviewerReportReasonResponse {\n");
            sb.Append("  ReasonId: ").Append(ReasonId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Confidence: ").Append(Confidence).Append("\n");
            sb.Append("  Tripped: ").Append(Tripped).Append("\n");
            sb.Append("  Seen: ").Append(Seen).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReviewerReportReasonResponse);
        }

        /// <summary>
        /// Returns true if ReviewerReportReasonResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ReviewerReportReasonResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReviewerReportReasonResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ReasonId == input.ReasonId ||
                    (this.ReasonId != null &&
                    this.ReasonId.Equals(input.ReasonId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Confidence == input.Confidence ||
                    (this.Confidence != null &&
                    this.Confidence.Equals(input.Confidence))
                ) && 
                (
                    this.Tripped == input.Tripped ||
                    (this.Tripped != null &&
                    this.Tripped.Equals(input.Tripped))
                ) && 
                (
                    this.Seen == input.Seen ||
                    (this.Seen != null &&
                    this.Seen.Equals(input.Seen))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ReasonId != null)
                    hashCode = hashCode * 59 + this.ReasonId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Confidence != null)
                    hashCode = hashCode * 59 + this.Confidence.GetHashCode();
                if (this.Tripped != null)
                    hashCode = hashCode * 59 + this.Tripped.GetHashCode();
                if (this.Seen != null)
                    hashCode = hashCode * 59 + this.Seen.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
