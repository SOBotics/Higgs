/* 
 * Higgs API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// RegisterPostContentFragment
    /// </summary>
    [DataContract]
    public partial class RegisterPostContentFragment :  IEquatable<RegisterPostContentFragment>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RegisterPostContentFragment" /> class.
        /// </summary>
        /// <param name="Order">The order in which the content will be displayed to the user.</param>
        /// <param name="Name">The name of the content type.</param>
        /// <param name="Content">The content itself.</param>
        /// <param name="RequiredScope">Required scopes the user must have to view the content..</param>
        public RegisterPostContentFragment(int? Order = default(int?), string Name = default(string), string Content = default(string), string RequiredScope = default(string))
        {
            this.Order = Order;
            this.Name = Name;
            this.Content = Content;
            this.RequiredScope = RequiredScope;
        }
        
        /// <summary>
        /// The order in which the content will be displayed to the user
        /// </summary>
        /// <value>The order in which the content will be displayed to the user</value>
        [DataMember(Name="order", EmitDefaultValue=false)]
        public int? Order { get; set; }

        /// <summary>
        /// The name of the content type
        /// </summary>
        /// <value>The name of the content type</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The content itself
        /// </summary>
        /// <value>The content itself</value>
        [DataMember(Name="content", EmitDefaultValue=false)]
        public string Content { get; set; }

        /// <summary>
        /// Required scopes the user must have to view the content.
        /// </summary>
        /// <value>Required scopes the user must have to view the content.</value>
        [DataMember(Name="requiredScope", EmitDefaultValue=false)]
        public string RequiredScope { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RegisterPostContentFragment {\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  RequiredScope: ").Append(RequiredScope).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RegisterPostContentFragment);
        }

        /// <summary>
        /// Returns true if RegisterPostContentFragment instances are equal
        /// </summary>
        /// <param name="input">Instance of RegisterPostContentFragment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RegisterPostContentFragment input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Order == input.Order ||
                    (this.Order != null &&
                    this.Order.Equals(input.Order))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Content == input.Content ||
                    (this.Content != null &&
                    this.Content.Equals(input.Content))
                ) && 
                (
                    this.RequiredScope == input.RequiredScope ||
                    (this.RequiredScope != null &&
                    this.RequiredScope.Equals(input.RequiredScope))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Order != null)
                    hashCode = hashCode * 59 + this.Order.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Content != null)
                    hashCode = hashCode * 59 + this.Content.GetHashCode();
                if (this.RequiredScope != null)
                    hashCode = hashCode * 59 + this.RequiredScope.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
