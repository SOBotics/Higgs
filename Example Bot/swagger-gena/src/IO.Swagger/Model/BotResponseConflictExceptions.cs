/* 
 * Higgs API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// BotResponseConflictExceptions
    /// </summary>
    [DataContract]
    public partial class BotResponseConflictExceptions :  IEquatable<BotResponseConflictExceptions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BotResponseConflictExceptions" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="IsConflict">IsConflict.</param>
        /// <param name="RequiresAdmin">RequiresAdmin.</param>
        /// <param name="RequiredFeedback">RequiredFeedback.</param>
        /// <param name="BotResponseConflictFeedbacks">BotResponseConflictFeedbacks.</param>
        public BotResponseConflictExceptions(int? Id = default(int?), bool? IsConflict = default(bool?), bool? RequiresAdmin = default(bool?), int? RequiredFeedback = default(int?), List<int?> BotResponseConflictFeedbacks = default(List<int?>))
        {
            this.Id = Id;
            this.IsConflict = IsConflict;
            this.RequiresAdmin = RequiresAdmin;
            this.RequiredFeedback = RequiredFeedback;
            this.BotResponseConflictFeedbacks = BotResponseConflictFeedbacks;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets IsConflict
        /// </summary>
        [DataMember(Name="isConflict", EmitDefaultValue=false)]
        public bool? IsConflict { get; set; }

        /// <summary>
        /// Gets or Sets RequiresAdmin
        /// </summary>
        [DataMember(Name="requiresAdmin", EmitDefaultValue=false)]
        public bool? RequiresAdmin { get; set; }

        /// <summary>
        /// Gets or Sets RequiredFeedback
        /// </summary>
        [DataMember(Name="requiredFeedback", EmitDefaultValue=false)]
        public int? RequiredFeedback { get; set; }

        /// <summary>
        /// Gets or Sets BotResponseConflictFeedbacks
        /// </summary>
        [DataMember(Name="botResponseConflictFeedbacks", EmitDefaultValue=false)]
        public List<int?> BotResponseConflictFeedbacks { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BotResponseConflictExceptions {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsConflict: ").Append(IsConflict).Append("\n");
            sb.Append("  RequiresAdmin: ").Append(RequiresAdmin).Append("\n");
            sb.Append("  RequiredFeedback: ").Append(RequiredFeedback).Append("\n");
            sb.Append("  BotResponseConflictFeedbacks: ").Append(BotResponseConflictFeedbacks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BotResponseConflictExceptions);
        }

        /// <summary>
        /// Returns true if BotResponseConflictExceptions instances are equal
        /// </summary>
        /// <param name="input">Instance of BotResponseConflictExceptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BotResponseConflictExceptions input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IsConflict == input.IsConflict ||
                    (this.IsConflict != null &&
                    this.IsConflict.Equals(input.IsConflict))
                ) && 
                (
                    this.RequiresAdmin == input.RequiresAdmin ||
                    (this.RequiresAdmin != null &&
                    this.RequiresAdmin.Equals(input.RequiresAdmin))
                ) && 
                (
                    this.RequiredFeedback == input.RequiredFeedback ||
                    (this.RequiredFeedback != null &&
                    this.RequiredFeedback.Equals(input.RequiredFeedback))
                ) && 
                (
                    this.BotResponseConflictFeedbacks == input.BotResponseConflictFeedbacks ||
                    this.BotResponseConflictFeedbacks != null &&
                    this.BotResponseConflictFeedbacks.SequenceEqual(input.BotResponseConflictFeedbacks)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IsConflict != null)
                    hashCode = hashCode * 59 + this.IsConflict.GetHashCode();
                if (this.RequiresAdmin != null)
                    hashCode = hashCode * 59 + this.RequiresAdmin.GetHashCode();
                if (this.RequiredFeedback != null)
                    hashCode = hashCode * 59 + this.RequiredFeedback.GetHashCode();
                if (this.BotResponseConflictFeedbacks != null)
                    hashCode = hashCode * 59 + this.BotResponseConflictFeedbacks.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
